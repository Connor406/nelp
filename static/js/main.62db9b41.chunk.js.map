{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","business","this","props","className","src","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOptions","sortByOption","setState","e","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","placeholder","onChange","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.62db9b41.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\n\nclass Business extends React.Component {\n    render() {\n        const { business } = this.props;\n        return (\n            <div className=\"Business\">\n                <div className=\"image-container\">\n                    <img src={business.imageSrc} alt='Image'/>\n                </div>\n                <h2>{business.name}</h2>\n                <div className=\"Business-information\">\n                    <div className=\"Business-address\">\n                        <p>{business.address}</p>\n                        <p>{business.city}</p>\n                        <p>{business.state}, {business.zipCode}</p>\n                    </div>\n                    <div className=\"Business-reviews\">\n                        <h3>{business.category}</h3>\n                        <h3 className=\"rating\">{business.rating} stars</h3>\n                    <p>{business.reviewCount} reviews</p>\n                    </div>\n                 </div>\n            </div>\n        );\n    }\n};\n\nexport default Business;","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component{\n  render(){\n    return (\n      <div className='BusinessList'>\n        {\n          this.props.businesses.map(\n            business => {\n              return <Business business={business} key={business.id} />;\n            }\n          )\n        }\n      </div>\n    );\n  }\n};\n\nexport default BusinessList;","import React from 'react';\nimport './SearchBar.css';\n\n\nclass SearchBar extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      term: '', \n      location: '',\n      sortBy: 'best_match'\n    };\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n    this.sortByOptions = {\n      \"Best Match\": 'best_match',\n      \"Highest Rated\": 'rating',\n      \"Most Reviewed\": 'review_count'\n    };\n  }\n\n  getSortByClass(sortByOption) {\n    if (this.state.sortBy === sortByOption) {\n      return 'active'\n    } else {\n      return ''\n    };\n  }\n\n  handleSortByChange(sortByOption) {\n    this.setState({\n      sortBy: sortByOption\n    });\n  }\n\n  handleTermChange(e) {\n    this.setState({\n      term: e.target.value\n    });\n  }\n\n  handleLocationChange(e) {\n    this.setState({\n      location: e.target.value\n    });\n  }\n\n  handleSearch(e) {\n    this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n    e.preventDefault();\n  }\n\n  renderSortByOptions() {\n    return Object.keys(this.sortByOptions).map(sortByOption => {\n      let sortByOptionValue = this.sortByOptions[sortByOption];\n      return <li \n          key={sortByOptionValue}\n          className={this.getSortByClass(sortByOptionValue)}\n          onClick={this.handleSortByChange.bind(this, sortByOptionValue)}\n        >{sortByOption}</li>;\n    });\n  }\n\n  render() {\n    return (\n      <div className='SearchBar'>\n        <div className='SearchBar-sort-options'>\n          <ul>\n            {this.renderSortByOptions()}\n          </ul>\n        </div>\n        <div className='SearchBar-fields'>\n          <input placeholder='Search Businesses' onChange={this.handleTermChange} />\n          <input placeholder='Where?' onChange={this.handleLocationChange} />\n        </div>\n        <div className='SearchBar-submit'>\n          <a onClick={this.handleSearch} >Let's Go</a>\n        </div>\n      </div>\n    )\n    };\n};\n\nexport default SearchBar;","\n\nconst apiKey = 'XkVHcEs9E7UkfKHBVqzBdK0khFCkhA8Rsq-SDRVY-bQXgEvx5pLXR3iBDNWKey36UDVReJI7hVok9oSRPedTpi8H7LMqh5WcwR0mU4k73LuimxDHRQLM7DeEV0ciX3Yx';\n\nconst Yelp = {\n  search(term, location, sortBy){\n    return fetch(\n      `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\n      {\n        headers: {\n          Authorization: `Bearer ${apiKey}`\n        }\n      }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (jsonResponse.businesses){\n        return jsonResponse.businesses.map(business => {\n          return {\n            id: business.id,\n            imageSrc: business.image_url,\n            name: business.name,\n            address: business.location.address1,\n            city: business.location.city,\n            state: business.location.state,\n            zipCode: business.location.zip_code,\n            category: business.categories.title,\n            rating: business.rating,\n            reviewCount: business.review_count\n          }\n      });\n    }\n  })\n}};\n\nexport default Yelp;","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Yelp from '../../util/Yelp';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      businesses: []\n    };\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy){\n    Yelp.search(term, location, sortBy).then(businesses => {\n      this.setState({\n        businesses: businesses\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <h1>nelp</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}